#+TITLE: Tree-sitter grammar for Smithy
#+AUTHOR: Simon Johnston
#+EMAIL: johnstonskj@gmail.com
#+LANGUAGE: en
#+STARTUP: overview hidestars inlineimages entitiespretty

This repository contains a [[https://github.com/tree-sitter/tree-sitter][tree-sitter]] grammar for the [[https://smithy.io/2.0/index.html][Smithy]] /language for defining services and SDKs/. 

* Grammar

The following are notes on some of the peculiarities of the Smithy grammar and any obvious deviations between Smithy's
ABNF and the tree-sitter grammar in =grammar.js=.

** Keywords

In the majority of programming languages keywords are also reserved, in which case a keyword may not be an identifier in
other contexts. For example, the following is illegal in Rust as both =struct= and =mod= are reserved keywords.

#+NAME: lst:rust-keyword-example
#+BEGIN_SRC rust :noeval
struct SomeExample {
    struct: String,
    mod: u16,
}
#+END_SRC

In Smithy, keywords are not reserved, which makes sense for an IDL as you don't know what may be reserved words in any
target language. For example, a metadata statement in Smithy starts with the keyword =metadata= but does not reserve this
keyword against use as a structure key. To accomplish this all keywords become defined in their respective location
rather than in a global list as seen in other tree-sitter grammars.

#+NAME: lst:grammar-metadata-statement
#+BEGIN_SRC js :noeval
metadata_statement: $ => seq(
    keyword('metadata'),
    field('key', $.node_object_key),
    '=',
    field('value', $.node_value)
),
#+END_SRC


** Whitespace

Smithy's definition handles all whitespace explicitly with a number of rules:

| Rule | Definition                  | Description                            |
|------+-----------------------------+----------------------------------------|
| =SP=   | =1*(%x20 / %x09)=             | one or more spaces or tabs             |
| =NL=   | =%x0A / %x0D.0A=              | newlines                               |
| =WS=   | =1*(SP / NL / Comment / ",")= | spaces, newlines, comments, and commas |
| =BR=   | =[SP] 1*(Comment / NL) [WS]=  | a line break followed by whitespace    |

These rules are then included in non-terminals so that the simple spaces in =SP= are differentiated from more complex
rules such as =WS= and =BR=.

#+NAME: lst:smithy-metadata-statement
#+BEGIN_EXAMPLE
MetadataStatement =
    %s"metadata" SP NodeObjectKey [SP] "=" [SP] NodeValue BR
#+END_EXAMPLE

The following sections describe how these have translated into the tree-sitter grammar.

*** Spaces

While Smithy includes a number of separate whitespace rules they don't cover a number of common characters. For example,
while =SP= includes the horizontal tab =\t= but not the vertical tab =\v= or form feed =\f=. This grammar chooses to use the
regular expression character class =\s= which includes the following values, including all Unicode whitespace.

#+NAME: lst:regex-whitespace
#+BEGIN_SRC js :noeval
/[\f\n\r\t\v\u0020\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]/
#+END_SRC

Tree-sitter has a specific mechanism to specify rules that can occur anywhere, in the ~extras~ key, as shown below.

#+NAME: lst:grammar-extras-whitespace
#+BEGIN_SRC js :noeval
extras: $ => [
    /\s/
],
#+END_SRC


*** End-of-line handling

The =BR= rule ensures that some rules, such as the metadata statement above, end with the end of the line. The expansion
of the =BR= rule includes both =NL= /and/ =Comment= given that comments are also line-terminated. To get the same result we
include an explicit, but hidden, rule names =_eol=.

#+NAME: lst:grammar-eol
#+BEGIN_SRC js :noeval
_eol: $ => token(prec(PREC_EOL, /(\n|\r\n)+/)),
#+END_SRC

We use this rule to terminate the following rules: ~control_statement~, ~metadata_statement~, ~_text_block~,
~namespace_statement~, ~_use_statement~, and ~shape_statements~.


*** Comments

Given that we wish to process comments we want to be able to address them as a rule, however we don't want to have to
explicitly allow them in all whitespace rules, as per the Smithy specification. Luckily the ~extras~ key introduced above
allows for this, resulting in the following.

#+NAME: lst:grammar-extras-comments
#+BEGIN_SRC js :noeval
extras: $ => [
    /\s/,
    $.documentation_comment,
    $.line_comment
],
#+END_SRC


*** Commas

The grammar corresponds to the version 2.0 Smithy model, it allows for comma-separation in some places as a migration
path from the earlier versions that required commas. However, rather than making whitespace explicit in the way that
Smithy's ABNF does we use the ~comma_repeat~ and ~comma_repeat1~ functions to wrap a rule into such a list.

#+NAME: lst:comma-separated-lists
#+BEGIN_SRC js :noeval
function seq_comma(rule) {
    return seq(rule, optional(','));
}

function comma_repeat1(rule) {
    return seq(seq_comma(rule), repeat(seq_comma(rule))
    );
}

function comma_repeat(rule) {
    return optional(comma_repeat1(rule));
}
#+END_SRC


** Missing =OperationBody= traits

This translation did uncover one issue, while traits are heavily used on the members of an =operation= the corresponding
=OperationBody= production does not allow for Traits.

#+NAME: lst:smithy-operation-statement
#+BEGIN_EXAMPLE
OperationStatement =
    %s"operation" SP Identifier [Mixins] [WS] OperationBody

OperationBody =
    "{" [WS]
    *(OperationInput / OperationOutput / OperationErrors)
    [WS] "}"
    ; only one of each property can be specified.
    
OperationInput =
    %s"input" [WS] (InlineStructure / (":" [WS] ShapeId)) WS
#+END_EXAMPLE

It might end up something like this:

#+NAME: lst:smithy-new-operation-body
#+BEGIN_EXAMPLE
OperationBody =
    "{" [WS]
    *(TraitStatements OperationBodyItem)
    [WS] "}"
    ; only one of each property can be specified.

OperationBodyItem =
    (OperationInput / OperationOutput / OperationErrors)
#+END_EXAMPLE


* Queries

If you want to understand how to query the model, check out the tests in =tests/corpus=, or in the following files in
=queries=.

- =highlights= :: the set of queries and mapping to allow for syntax highlighting.
- =folds= :: a small set of queries to allow for code folding of shapes.
- =lint= :: the beginnings of lint rules described as queries
- =tags= :: the set of queries to extract tags from a source file.

** Folding

The file =folds.scm= describes the nodes that support folding; currently, only /shape/ statements and /apply/ statements.


** Highlighting

The file =highlights.scm= assigns highlight styles to Smithy source in the following manner.

- =@comment= :: line and documentation comments.
- =@keyword= :: =$=, apply=, =errors=, =for=, =input=, =key=, =list=, =map=, =member=, =metadata=, =namespace=, =operation=, =output=, =resource=,
  =service=, =structure=, =union=, =use=, =value=, =with=
- =@keyword.simple_type= :: =bigDecimal=, =bigInteger=, =blob=, =boolean=, =byte=, =document=, =double=,
  =enum=, =float=, =intEnum=, =integer=, =long=, =short=, =string=, =timestamp=
- =@keyword.aggregate_type= :: =list=, =map=, =structure=, =union=
- =@keyword.service_type= :: =operation=, =resource=, =service=
- =@number= :: numeric literals.
- =@string= :: string literals, quoted strings and text blocks.
- =@constant.builtin= :: =true=, =false=, =null=
- =@module= :: the value of a =namespace= statement.
- =@type.definition= :: all shape names.
- =@type= :: =use=-ed shape identifiers, values of type =ShapeID=, mixin references, structure resource references,  structure
  member types
- =@variable= :: object value keys and shape member names.
- =@constructor= :: enumeration variants
- =@attribute= :: trait names when applied to a shape.
- =@punctuation.bracket= :: ='('=, =')'=, ='['=, =']'=, ='{'=, ='}'=
- =@punctuation.delimiter= :: =','=, =':'=
- =@operator= :: ='​='= in metadata statements, ='​='= in value assignments, =':​='= defining inline structures in operations
- =@error= :: any ~(ERROR)~ node in the tree

  
** Indentation

TBD


** Lint

The file =lint.scm= contains a set of queries, each of which will select nodes that break some rule. For example, one rule
selects all operations statement names that do not follow the Smithy naming /conventions/.

#+NAME: lst:lint-query-example
#+BEGIN_SRC emacs-lisp :noeval
(operation_statement
 name: (identifier) @name
 (#not-match? @name "^(Batch)?(Create|Get|List|Put|Update|Delete).*$"))
#+END_SRC

The queries implement the following rules:

- Preamble rules:
  - Version number *should* be "2".
- Type names:
  - Shape identifiers (references) *must not* start with a lower case letter.
  - Shape identifiers (statements) *must not* start with a lower case letter.
- Member names:
  - Object keys *must not* start with an upper case letter.
  - Structure member identifiers *must not* start with an upper case letter.
  - Shape ID member identifiers *must not* start with an upper case letter.
- Enum variants:
  - Variant (enum members) identifiers *must* be all upper case.
- Additional Naming:
  - List types *should* end with the string "List".
  - Map types *should* end with the string "Map" or "Mapping".
  - Operations *should* follow a functional naming convention.
  - Operation input structures *should* follow a functional naming - convention.
  - Operation output structures *should* follow a functional naming convention.
- Traits:
  - Applied trait identifiers *must not* start with an upper case letter.
- Other:
  - All shapes *should* have documentation comments


** Tags

The file =tags.scm= extracts tags from a Smithy file assigning them the following classes.

- =@name= :: object value keys, enum variants, shape member identifiers.
- =@definition.type= :: all shape identifiers.
- =@reference.type= :: use=-ed shape identifiers, values of type =ShapeID=, mixin references, structure resource references,  structure
  member types.
- =@reference.trait= :: applied trait identifiers.


* Using the grammar

** Emacs (< 29)

While Emacs 29 includes a builtin [[https://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/treesit.el][treesit]], prior versions rely on separate [[https://emacs-tree-sitter.github.io/][tree-sitter]] and tree-sitter-/langs/ packages.
My configuration relies on [[https://github.com/jwiegley/use-package][use-package]] so you may need to adjust the following accordingly.

#+BEGIN_SRC emacs-lisp :noeval
(use-package tree-sitter :ensure t)

(use-package tree-sitter-langs :ensure t :after tree-sitter)
#+END_SRC

Now, the way this works is that there needs to be a mapping from an existing major mode to a tree-sitter parser, so
install the [[https://github.com/mnemitz/smithy-mode][smithy-mode]] from MELPA. Note that this currently targets Smithy 1.x and so not all highlighting works as
expected.

#+BEGIN_SRC emacs-lisp :noeval
(use-package smithy-mode :ensure t)
#+END_SRC

Also, the tree-sitter package is uses version 13 of the ABI, so we need to force a build with this specific version as
the Makefile by default uses "latest".

#+BEGIN_SRC bash :noeval
TS_GENERATE_ABI=13 make grammar
#+END_SRC

Now that you have the built library you need to copy it to a directory that is in the list ~tree-sitter-load-path~, or
alternatively add the =build= directory to this path. Once the library is correctly placed, load it.

#+BEGIN_SRC emacs-lisp :noeval
(tree-sitter-load 'smithy)
#+END_SRC

To ensure this worked, describe the variable ~tree-sitter-languages~ which should include an entry that looks like
~(smithy . #<user-ptr …>)~.

Now, make the connection between the major mode and newly loaded parser library.

#+BEGIN_SRC emacs-lisp :noeval
(add-to-list 'tree-sitter-major-mode-language-alist
             ('smithy-mode 'smithy))
#+END_SRC

Finally, hook =tree-sitter-mode= and =tree-sitter-hl-mode= (minor modes) to =smithy-mode= so that they are already available.

#+BEGIN_SRC emacs-lisp :noeval
(add-hook 'smithy-mode-hook #'tree-sitter-mode)
(add-hook 'smithy-mode-hook #'tree-sitter-hl-mode)
#+END_SRC

Now, open a Smithy file and try =M-x tree-sitter-debug-mode= to show the current buffer’s syntax tree in a separate buffer
or try =M-x tree-sitter-query-builder= to open the query playground.

** Emacs (>= 29)

TBD


** Neovim

[[https://neovim.io/][Neovim]] has some great tree-sitter support with the [[https://github.com/nvim-treesitter/nvim-treesitter][nvim-tree-sitter]] and a nice in-editor [[https://github.com/nvim-treesitter/playground][playground]]. Figure
[[fig:nvim-screenshot]] shows a Neovim session with a highlighted, and folded, Smithy file along with the tree-sitter
playground providing the tree view and query editor.

#+CAPTION: Neovim with Smithy
#+NAME: fig:nvim-screenshot
#+ATTR_HTML: :align center :width 80% :height 80%                                                                                                                         
[[./nvim-screenshot.png]]

Firstly, add the tree-sitter plugin, but don't install yet, as shown on the nvim-treesitter page (using [[https://github.com/junegunn/vim-plug][vim-plug]]):

#+NAME: lst:vim-ts-plugin
#+BEGIN_SRC vimrc-mode :noeval
call plug#begin()

Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

call plug#end()
#+END_SRC

Now, add the following Lua block, using content from the homepage, and then set the ~ensure_installed~ to include the
query language and so highlight tree-sitter queries and set ~ignore_install~ to include smithy *before* installing the
tree-sitter plugin. The builtin smithy grammar will unfortunately install queries that will then be a problem so we want
to avoid that.

#+NAME: lst:vim-ts-config
#+BEGIN_SRC lua :noeval
require'nvim-treesitter.configs'.setup {
    ensure_installed = { "query" }, 
    ignore_install = { "smithy" },
    sync_install = false,
    auto_install = true,
    highlight = {
        enable = true,
        disable = {},
        additional_vim_regex_highlighting = false,
    },
    incremental_selection = {
        enable = true,
        keymaps = {
            init_selection = "gnn",
            node_incremental = "grn",
            scope_incremental = "grc",
            node_decremental = "grm",
        },
    },
    indent = {
        enable = true
    },
    query_linter = {
        enable = true,
        use_virtual_text = true,
        lint_events = {"BufWrite", "CursorHold"},
    },
}
#+END_SRC

To allow tree-sitter to do folding based on =folds.scm=, add the following to =init.vim=.

#+NAME: lst:vim-ts-folding
#+BEGIN_SRC vimrc-mode :noeval
set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()
#+END_SRC

Once the core plugin has been installed you can add the following Lua block in =init.vim= to install /this/ grammar.

#+NAME: lst:vim-ts-add-smithy
#+BEGIN_SRC lua :noeval
local parser_config = require "nvim-treesitter.parsers".get_parser_configs()

parser_config.smithy = {
    install_info = {
        url = "https://github.com/johnstonskj/tree-sitter-smithy",
        files = {"src/parser.c"},
        generate_requires_npm = true, 
        requires_generate_from_grammar = true,  
    },
    filetype = "smithy",
    maintainers = { "@johnstonskj" },
}
#+END_SRC

Additionally, try the  [[https://github.com/nvim-treesitter/nvim-treesitter-context][nvim-treesitter-context]] and [[https://github.com/nvim-treesitter/nvim-treesitter-refactor][nvim-treesitter-refactor]] plugins based on tree-sitter.

#+NAME: lst:vim-ts-extras
#+BEGIN_SRC vimrc-mode :noeval
call plug#begin()

Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-treesitter/nvim-treesitter-context' 
Plug 'nvim-treesitter/playground'

call plug#end()
#+END_SRC

Add the corresponding configuration:

#+NAME: lst:vim-ts-playground-config
#+BEGIN_SRC lua :noeval
require'nvim-treesitter.configs'.setup {
    // …
    playground = {
        enable = true,
        disable = {},
        updatetime = 25,
        persist_queries = false,
        keybindings = {
            toggle_query_editor = 'o',
            toggle_hl_groups = 'i',
            toggle_injected_languages = 't',
            toggle_anonymous_nodes = 'a',
            toggle_language_display = 'I',
            focus_language = 'f',
            unfocus_language = 'F',
            update = 'R',
            goto_node = '<cr>',
            show_help = '?',
        },
    }
}
#+END_SRC


* More Work

TBD

